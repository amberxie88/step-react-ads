{"ast":null,"code":"var _jsxFileName = \"/home/kjchan/step-react-ads/client/src/Dashboard/Utilities/Walkthrough.js\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nconst QueryWalkthrough = [{\n  target: 'body',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Welcome to the Query Page!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"This page is a sample of how the Ads API can be used to obtain information about an account. The queries follow the Google Ads Query Language (\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://developers.google.com/google-ads/api/docs/query/interactive-gaql-builder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }\n  }, \"GAQL\"), \"), which is then processed by the servlet. The code primarily lies in QueryDashboard.js and GetCampaignsServlet.java\")),\n  placement: 'center'\n}, {\n  target: '.selected-account',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Select Your Client Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"After authenticating on the Login page, the user is prompted to select a client account to query. Under every Google Ads account, there can be multiple manager accounts, which may manage separate clients or other managers. To learn more about how we keep track of client accounts of different sessions, revisit our login page!\"))\n}, {\n  target: '.query-card',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Query Card\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Here, the user may enter any query that follows the GAQL syntax, and the results will be generated below. Users will be notified if any error occurs during the Ads API call. To build your own GAQL queries or learn more about the GAQL syntax, visit \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://developers.google.com/google-ads/api/docs/query/interactive-gaql-builder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 54\n    }\n  }, \"this link\"), \".\"))\n}];\nconst LoginWalkthrough = [{\n  target: 'body',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Welcome to the Google Ads API Web App Demo!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Throughout the website, we will have a series of tours showing how we implemented the Ads API into a simple web application, and how you can do so as well! Intermediate developers have historically struggled with integrating the API, especially in regards to the OAuth 2.0 web flow, and we hope this will serve as a starter project or example of how the Ads API can be used. Check out our \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/amberxie88/step-react-ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"Github page\"), \".\")),\n  placement: 'center'\n}, {\n  target: 'body',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"This is the Login Page\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"This Login Page implements the OAuth 2.0 procedure, a historically challenging task for Intermediate developers. To implement this, we rely on two main servlets: OAuthServlet.java and CallbackServlet.java, and we use Datastore to maintain credentials and refresh tokens for each session.\")),\n  placement: 'center'\n}, {\n  target: '.login-button',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Login Button\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"This Login Button makes a call to the OAuth servlet, which retrieves the necessary credentials, the redirect URI, and the current HTTP Session to generate a unique URL for login. After the user logs in, they are redirected to the redirect URI, which is the Callback Servlet. The servlet verifies that it is retrieving the correct token for the session, generates the refresh token, and stores it in Datastore. It is important to note that each session is mapped to different refresh tokens.\"))\n}, {\n  target: '.available-accounts',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Available Customer IDs\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Once the user is logged in, the AccessibleCustomersServlet is called. This makes a call to the Ads API and returns client accounts that the user has access to. The user may choose one, and the SetClientAccServlet is called, which maps the session ID to the selected customer ID, and uploads it to Datastore.\"))\n}, {\n  target: '.logout-button',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Logout Button\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"At any point, if the user chooses to log in, their refresh token will be removed from Datastore via the LogoutServlet.\"))\n}];\nconst ReportsWalkthrough = [{\n  target: 'body',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Welcome to the Dashboard Page!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"This page is a sample of how the Ads UI can be replicated and customized using custom calls and charts. The code primarily lies in ReportsDashboard.js and GetCampaignsServlet.java\")),\n  placement: 'center'\n}, {\n  target: '.clicks-per-campaign',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Clicks Per Campaign Chart\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"This chart uses API data from your Ads Account to visualize how well campaigns are doing. This is an example of a chart that can be directly replicated from the Google Ads UI.\"))\n}, {\n  target: '.chart-1',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"Sales Chart\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"TODO: Details on how this is used.\"))\n}, {\n  target: '.recent-deposits',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"Total Ad Spend\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"TODO: Details on how this is used.\"))\n}, {\n  target: '.campaign-data',\n  content: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Campaign Data\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, \"This list of campaign IDs, names, status, clicks, and impressions is generated from a call to the Ads API.\"))\n}];\nexport { QueryWalkthrough, LoginWalkthrough, ReportsWalkthrough };","map":{"version":3,"sources":["/home/kjchan/step-react-ads/client/src/Dashboard/Utilities/Walkthrough.js"],"names":["React","QueryWalkthrough","target","content","placement","LoginWalkthrough","ReportsWalkthrough"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\n\nconst QueryWalkthrough = [\n  {\n    target: 'body',\n    content: \n      <div>\n        <h1>Welcome to the Query Page!</h1> \n        <p>This page is a sample of how the Ads API can be used to obtain information about an account.\n          The queries follow the Google Ads Query Language \n          (<a href=\"https://developers.google.com/google-ads/api/docs/query/interactive-gaql-builder\">GAQL</a>),\n          which is then processed by the servlet. The code primarily lies in QueryDashboard.js and GetCampaignsServlet.java\n        </p>\n      </div>,\n    placement: 'center',\n  }, {\n    target: '.selected-account',\n    content:\n     <div>\n        <h2>Select Your Client Account</h2> \n        <p>After authenticating on the Login page, the user is prompted to select a client account to query.\n          Under every Google Ads account, there can be multiple manager accounts, which may manage separate clients or other\n          managers. To learn more about how we keep track of client accounts of different sessions, revisit our login page!\n        </p>\n      </div>,\n  }, {\n    target: '.query-card',\n    content:        \n      <div>\n        <h2>Query Card</h2> \n        <p>Here, the user may enter any query that follows the GAQL syntax, and the results will be generated\n          below. Users will be notified if any error occurs during the Ads API call. To build your own GAQL queries\n          or learn more about the GAQL syntax, visit <a href=\"https://developers.google.com/google-ads/api/docs/query/interactive-gaql-builder\">this link</a>.\n        </p>\n      </div>,\n  }];\n\nconst LoginWalkthrough = [\n  {\n    target: 'body',\n    content: \n      <div>\n        <h1>Welcome to the Google Ads API Web App Demo!</h1> \n        <p>\n          Throughout the website, we will have a series of tours showing how we implemented the Ads API into \n          a simple web application, and how you can do so as well! Intermediate developers have historically \n          struggled with integrating the API, especially in regards to the OAuth 2.0 web flow, and we hope \n          this will serve as a starter project or example of how the Ads API can be used. Check out \n          our <a href=\"https://github.com/amberxie88/step-react-ads\">Github page</a>.\n        </p>\n      </div>,\n    placement: 'center',\n  }, {\n    target: 'body',\n    content: \n      <div>\n        <h1>This is the Login Page</h1> \n        <p> \n          This Login Page implements the OAuth 2.0 procedure, a historically challenging task for Intermediate\n          developers. To implement this, we rely on two main servlets: OAuthServlet.java and CallbackServlet.java, \n          and we use Datastore to maintain credentials and refresh tokens for each session. \n        </p>\n      </div>,\n    placement: 'center',\n  }, {\n    target: '.login-button',\n    content:\n     <div>\n        <h2>Login Button</h2> \n        <p>\n          This Login Button makes a call to the OAuth servlet, which retrieves the necessary credentials, the\n          redirect URI, and the current HTTP Session to generate a unique URL for login. After the user logs in,\n          they are redirected to the redirect URI, which is the Callback Servlet. The servlet verifies that it is\n          retrieving the correct token for the session, generates the refresh token, and stores it in Datastore.\n          It is important to note that each session is mapped to different refresh tokens.\n        </p>\n      </div>,\n  }, {\n    target: '.available-accounts',\n    content:        \n      <div>\n        <h2>Available Customer IDs</h2> \n        <p>\n          Once the user is logged in, the AccessibleCustomersServlet is called. This makes a call to the Ads API \n          and returns client accounts that the user has access to. The user may choose one, and the SetClientAccServlet\n          is called, which maps the session ID to the selected customer ID, and uploads it to Datastore.\n        </p>\n      </div>,\n  }, {\n    target: '.logout-button',\n    content:        \n      <div>\n        <h2>Logout Button</h2> \n        <p>\n          At any point, if the user chooses to log in, their refresh token will be removed from Datastore via the\n          LogoutServlet.\n        </p>\n      </div>,\n  }];\n\nconst ReportsWalkthrough = [\n  {\n    target: 'body',\n    content: \n      <div>\n        <h1>Welcome to the Dashboard Page!</h1> \n        <p>This page is a sample of how the Ads UI can be replicated and customized using\n          custom calls and charts. The code primarily lies in ReportsDashboard.js and \n          GetCampaignsServlet.java</p>\n      </div>,\n    placement: 'center',\n  }, {\n    target: '.clicks-per-campaign',\n    content:\n     <div>\n        <h2>Clicks Per Campaign Chart</h2> \n        <p>This chart uses API data from your Ads Account to visualize how well campaigns are doing.\n          This is an example of a chart that can be directly replicated from the Google Ads UI.</p>\n      </div>,\n  }, {\n    target: '.chart-1',\n    content:        \n      <div>\n        <h2>Sales Chart</h2> \n        <p>TODO: Details on how this is used.</p>\n      </div>,\n  }, {\n    target: '.recent-deposits',\n    content: \n      <div>\n        <h2>Total Ad Spend</h2> \n        <p>TODO: Details on how this is used.</p>\n      </div>,\n  }, {\n    target: '.campaign-data',\n    content: \n      <div>\n        <h2>Campaign Data</h2> \n        <p>This list of campaign IDs, names, status, clicks, and impressions is generated from a call\n          to the Ads API.</p>\n      </div>,\n  },];\nexport { QueryWalkthrough, LoginWalkthrough, ReportsWalkthrough };\n"]},"metadata":{},"sourceType":"module"}