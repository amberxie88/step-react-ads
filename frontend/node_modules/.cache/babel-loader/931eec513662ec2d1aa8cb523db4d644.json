{"ast":null,"code":"/**\n* @license nested-property https://github.com/cosmosio/nested-property\n*\n* The MIT License (MIT)\n*\n* Copyright (c) 2014-2015 Olivier Scherrer <pode.fr@gmail.com>\n*/\n\"use strict\";\n\nmodule.exports = {\n  set: setNestedProperty,\n  get: getNestedProperty,\n  has: hasNestedProperty,\n  hasOwn: function hasOwn(object, property, options) {\n    return this.has(object, property, options || {\n      own: true\n    });\n  },\n  isIn: isInNestedProperty\n};\n/**\n * Get the property of an object nested in one or more objects\n * given an object such as a.b.c.d = 5, getNestedProperty(a, \"b.c.d\") will return 5.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @returns the object or the the property value if found\n */\n\nfunction getNestedProperty(object, property) {\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\");\n      return split.reduce(function (obj, prop) {\n        return obj && obj[prop];\n      }, object);\n    } else if (typeof property == \"number\") {\n      return object[property];\n    } else {\n      return object;\n    }\n  } else {\n    return object;\n  }\n}\n/**\n * Tell if a nested object has a given property (or array a given index)\n * given an object such as a.b.c.d = 5, hasNestedProperty(a, \"b.c.d\") will return true.\n * It also returns true if the property is in the prototype chain.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @param {Object} options:\n *  - own: set to reject properties from the prototype\n * @returns true if has (property in object), false otherwise\n */\n\n\nfunction hasNestedProperty(object, property, options) {\n  options = options || {};\n\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\");\n      return split.reduce(function (obj, prop, idx, array) {\n        if (idx == array.length - 1) {\n          if (options.own) {\n            return !!(obj && obj.hasOwnProperty(prop));\n          } else {\n            return !!(obj !== null && typeof obj == \"object\" && prop in obj);\n          }\n        }\n\n        return obj && obj[prop];\n      }, object);\n    } else if (typeof property == \"number\") {\n      return property in object;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n/**\n * Set the property of an object nested in one or more objects\n * If the property doesn't exist, it gets created.\n * @param {Object} object\n * @param {String} property\n * @param value the value to set\n * @returns object if no assignment was made or the value if the assignment was made\n */\n\n\nfunction setNestedProperty(object, property, value) {\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\");\n      return split.reduce(function (obj, prop, idx) {\n        var nextPropIsNumber = Number.isInteger(Number(split[idx + 1]));\n        obj[prop] = obj[prop] || (nextPropIsNumber ? [] : {});\n\n        if (split.length == idx + 1) {\n          obj[prop] = value;\n        }\n\n        return obj[prop];\n      }, object);\n    } else if (typeof property == \"number\") {\n      object[property] = value;\n      return object[property];\n    } else {\n      return object;\n    }\n  } else {\n    return object;\n  }\n}\n/**\n * Tell if an object is on the path to a nested property\n * If the object is on the path, and the path exists, it returns true, and false otherwise.\n * @param {Object} object to get the nested property from\n * @param {String} property name of the nested property\n * @param {Object} objectInPath the object to check\n * @param {Object} options:\n *  - validPath: return false if the path is invalid, even if the object is in the path\n * @returns {boolean} true if the object is on the path\n */\n\n\nfunction isInNestedProperty(object, property, objectInPath, options) {\n  options = options || {};\n\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\"),\n          isIn = false,\n          pathExists;\n      pathExists = !!split.reduce(function (obj, prop) {\n        isIn = isIn || obj === objectInPath || !!obj && obj[prop] === objectInPath;\n        return obj && obj[prop];\n      }, object);\n\n      if (options.validPath) {\n        return isIn && pathExists;\n      } else {\n        return isIn;\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/kjchan/step-react-ads/client/node_modules/tree-changes/node_modules/nested-property/index.js"],"names":["module","exports","set","setNestedProperty","get","getNestedProperty","has","hasNestedProperty","hasOwn","object","property","options","own","isIn","isInNestedProperty","split","reduce","obj","prop","idx","array","length","hasOwnProperty","value","nextPropIsNumber","Number","isInteger","objectInPath","pathExists","validPath"],"mappings":"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","sourcesContent":["/**\n* @license nested-property https://github.com/cosmosio/nested-property\n*\n* The MIT License (MIT)\n*\n* Copyright (c) 2014-2015 Olivier Scherrer <pode.fr@gmail.com>\n*/\n\"use strict\";\n\nmodule.exports = {\n  set: setNestedProperty,\n  get: getNestedProperty,\n  has: hasNestedProperty,\n  hasOwn: function (object, property, options) {\n      return this.has(object, property, options || {own: true});\n  },\n  isIn: isInNestedProperty\n};\n\n/**\n * Get the property of an object nested in one or more objects\n * given an object such as a.b.c.d = 5, getNestedProperty(a, \"b.c.d\") will return 5.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @returns the object or the the property value if found\n */\nfunction getNestedProperty(object, property) {\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\");\n            return split.reduce(function (obj, prop) {\n                return obj && obj[prop];\n            }, object);\n        } else if (typeof property == \"number\") {\n            return object[property];\n        } else {\n            return object;\n        }\n    } else {\n        return object;\n    }\n}\n\n/**\n * Tell if a nested object has a given property (or array a given index)\n * given an object such as a.b.c.d = 5, hasNestedProperty(a, \"b.c.d\") will return true.\n * It also returns true if the property is in the prototype chain.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @param {Object} options:\n *  - own: set to reject properties from the prototype\n * @returns true if has (property in object), false otherwise\n */\nfunction hasNestedProperty(object, property, options) {\n    options = options || {};\n\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\");\n            return split.reduce(function (obj, prop, idx, array) {\n                if (idx == array.length - 1) {\n                    if (options.own) {\n                        return !!(obj && obj.hasOwnProperty(prop));\n                    } else {\n                        return !!(obj !== null && typeof obj == \"object\" && prop in obj);\n                    }\n                }\n                return obj && obj[prop];\n            }, object);\n        } else if (typeof property == \"number\") {\n            return property in object;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * Set the property of an object nested in one or more objects\n * If the property doesn't exist, it gets created.\n * @param {Object} object\n * @param {String} property\n * @param value the value to set\n * @returns object if no assignment was made or the value if the assignment was made\n */\nfunction setNestedProperty(object, property, value) {\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\");\n            return split.reduce(function (obj, prop, idx) {\n                const nextPropIsNumber = Number.isInteger(Number(split[idx + 1]));\n                \n                obj[prop] = obj[prop] || (nextPropIsNumber ? [] : {})\n                if (split.length == (idx + 1)) {\n                    obj[prop] = value;\n                }\n                return obj[prop];\n            }, object);\n        } else if (typeof property == \"number\") {\n            object[property] = value;\n            return object[property];\n        } else {\n            return object;\n        }\n    } else {\n        return object;\n    }\n}\n\n/**\n * Tell if an object is on the path to a nested property\n * If the object is on the path, and the path exists, it returns true, and false otherwise.\n * @param {Object} object to get the nested property from\n * @param {String} property name of the nested property\n * @param {Object} objectInPath the object to check\n * @param {Object} options:\n *  - validPath: return false if the path is invalid, even if the object is in the path\n * @returns {boolean} true if the object is on the path\n */\nfunction isInNestedProperty(object, property, objectInPath, options) {\n    options = options || {};\n\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\"),\n                isIn = false,\n                pathExists;\n\n            pathExists = !!split.reduce(function (obj, prop) {\n                isIn = isIn || obj === objectInPath || (!!obj && obj[prop] === objectInPath);\n                return obj && obj[prop];\n            }, object);\n\n            if (options.validPath) {\n                return isIn && pathExists;\n            } else {\n                return isIn;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}